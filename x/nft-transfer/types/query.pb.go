// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chainmain/nft_transfer/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryClassTraceRequest is the request type for the Query/ClassDenom RPC
// method
type QueryClassTraceRequest struct {
	// hash (in hex format) or classID (full classID with ibc prefix) of the denomination trace information.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryClassTraceRequest) Reset()         { *m = QueryClassTraceRequest{} }
func (m *QueryClassTraceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassTraceRequest) ProtoMessage()    {}
func (*QueryClassTraceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4979c1c1d06d5f7, []int{0}
}
func (m *QueryClassTraceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassTraceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassTraceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassTraceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassTraceRequest.Merge(m, src)
}
func (m *QueryClassTraceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassTraceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassTraceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassTraceRequest proto.InternalMessageInfo

func (m *QueryClassTraceRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// QueryClassTraceResponse is the response type for the Query/ClassDenom RPC
// method.
type QueryClassTraceResponse struct {
	// class_trace returns the requested class trace information.
	ClassTrace *ClassTrace `protobuf:"bytes,1,opt,name=class_trace,json=classTrace,proto3" json:"class_trace,omitempty"`
}

func (m *QueryClassTraceResponse) Reset()         { *m = QueryClassTraceResponse{} }
func (m *QueryClassTraceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassTraceResponse) ProtoMessage()    {}
func (*QueryClassTraceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4979c1c1d06d5f7, []int{1}
}
func (m *QueryClassTraceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassTraceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassTraceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassTraceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassTraceResponse.Merge(m, src)
}
func (m *QueryClassTraceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassTraceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassTraceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassTraceResponse proto.InternalMessageInfo

func (m *QueryClassTraceResponse) GetClassTrace() *ClassTrace {
	if m != nil {
		return m.ClassTrace
	}
	return nil
}

// QueryConnectionsRequest is the request type for the Query/ClassTraces RPC
// method
type QueryClassTracesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassTracesRequest) Reset()         { *m = QueryClassTracesRequest{} }
func (m *QueryClassTracesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassTracesRequest) ProtoMessage()    {}
func (*QueryClassTracesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4979c1c1d06d5f7, []int{2}
}
func (m *QueryClassTracesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassTracesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassTracesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassTracesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassTracesRequest.Merge(m, src)
}
func (m *QueryClassTracesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassTracesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassTracesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassTracesRequest proto.InternalMessageInfo

func (m *QueryClassTracesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClassTracesResponse is the response type for the Query/ClassTraces RPC
// method.
type QueryClassTracesResponse struct {
	// class_traces returns all class trace information.
	ClassTraces Traces `protobuf:"bytes,1,rep,name=class_traces,json=classTraces,proto3,castrepeated=Traces" json:"class_traces"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassTracesResponse) Reset()         { *m = QueryClassTracesResponse{} }
func (m *QueryClassTracesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassTracesResponse) ProtoMessage()    {}
func (*QueryClassTracesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4979c1c1d06d5f7, []int{3}
}
func (m *QueryClassTracesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassTracesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassTracesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassTracesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassTracesResponse.Merge(m, src)
}
func (m *QueryClassTracesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassTracesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassTracesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassTracesResponse proto.InternalMessageInfo

func (m *QueryClassTracesResponse) GetClassTraces() Traces {
	if m != nil {
		return m.ClassTraces
	}
	return nil
}

func (m *QueryClassTracesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClassHashRequest is the request type for the Query/ClassHash RPC
// method
type QueryClassHashRequest struct {
	// The class trace ([port_id]/[channel_id])+/[denom]
	Trace string `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
}

func (m *QueryClassHashRequest) Reset()         { *m = QueryClassHashRequest{} }
func (m *QueryClassHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassHashRequest) ProtoMessage()    {}
func (*QueryClassHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4979c1c1d06d5f7, []int{4}
}
func (m *QueryClassHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassHashRequest.Merge(m, src)
}
func (m *QueryClassHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassHashRequest proto.InternalMessageInfo

func (m *QueryClassHashRequest) GetTrace() string {
	if m != nil {
		return m.Trace
	}
	return ""
}

// QueryClassHashResponse is the response type for the Query/ClassHash RPC
// method.
type QueryClassHashResponse struct {
	// hash (in hex format) of the denomination trace information.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *QueryClassHashResponse) Reset()         { *m = QueryClassHashResponse{} }
func (m *QueryClassHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassHashResponse) ProtoMessage()    {}
func (*QueryClassHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4979c1c1d06d5f7, []int{5}
}
func (m *QueryClassHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassHashResponse.Merge(m, src)
}
func (m *QueryClassHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassHashResponse proto.InternalMessageInfo

func (m *QueryClassHashResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// QueryEscrowAddressRequest is the request type for the EscrowAddress RPC method.
type QueryEscrowAddressRequest struct {
	// unique port identifier
	PortId string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// unique channel identifier
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *QueryEscrowAddressRequest) Reset()         { *m = QueryEscrowAddressRequest{} }
func (m *QueryEscrowAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowAddressRequest) ProtoMessage()    {}
func (*QueryEscrowAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4979c1c1d06d5f7, []int{6}
}
func (m *QueryEscrowAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowAddressRequest.Merge(m, src)
}
func (m *QueryEscrowAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowAddressRequest proto.InternalMessageInfo

func (m *QueryEscrowAddressRequest) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *QueryEscrowAddressRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

// QueryEscrowAddressResponse is the response type of the EscrowAddress RPC method.
type QueryEscrowAddressResponse struct {
	// the escrow account address
	EscrowAddress string `protobuf:"bytes,1,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
}

func (m *QueryEscrowAddressResponse) Reset()         { *m = QueryEscrowAddressResponse{} }
func (m *QueryEscrowAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEscrowAddressResponse) ProtoMessage()    {}
func (*QueryEscrowAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4979c1c1d06d5f7, []int{7}
}
func (m *QueryEscrowAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEscrowAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEscrowAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEscrowAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEscrowAddressResponse.Merge(m, src)
}
func (m *QueryEscrowAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEscrowAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEscrowAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEscrowAddressResponse proto.InternalMessageInfo

func (m *QueryEscrowAddressResponse) GetEscrowAddress() string {
	if m != nil {
		return m.EscrowAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryClassTraceRequest)(nil), "chainmain.nft_transfer.v1.QueryClassTraceRequest")
	proto.RegisterType((*QueryClassTraceResponse)(nil), "chainmain.nft_transfer.v1.QueryClassTraceResponse")
	proto.RegisterType((*QueryClassTracesRequest)(nil), "chainmain.nft_transfer.v1.QueryClassTracesRequest")
	proto.RegisterType((*QueryClassTracesResponse)(nil), "chainmain.nft_transfer.v1.QueryClassTracesResponse")
	proto.RegisterType((*QueryClassHashRequest)(nil), "chainmain.nft_transfer.v1.QueryClassHashRequest")
	proto.RegisterType((*QueryClassHashResponse)(nil), "chainmain.nft_transfer.v1.QueryClassHashResponse")
	proto.RegisterType((*QueryEscrowAddressRequest)(nil), "chainmain.nft_transfer.v1.QueryEscrowAddressRequest")
	proto.RegisterType((*QueryEscrowAddressResponse)(nil), "chainmain.nft_transfer.v1.QueryEscrowAddressResponse")
}

func init() {
	proto.RegisterFile("chainmain/nft_transfer/v1/query.proto", fileDescriptor_d4979c1c1d06d5f7)
}

var fileDescriptor_d4979c1c1d06d5f7 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0xc7, 0xbb, 0x28, 0x98, 0x3e, 0x15, 0x0e, 0x13, 0x14, 0xd8, 0xe8, 0x42, 0x9a, 0x80, 0xc4,
	0xb8, 0x33, 0x2c, 0x88, 0x17, 0x4f, 0x42, 0x44, 0xb9, 0x18, 0xac, 0x2f, 0x31, 0x5e, 0x9a, 0xe9,
	0x76, 0xd8, 0xdd, 0x04, 0x76, 0x96, 0x9d, 0x01, 0x25, 0xa4, 0x17, 0x3f, 0x81, 0x89, 0xdf, 0xc1,
	0x18, 0xbe, 0x83, 0x77, 0x8e, 0x24, 0x7a, 0xf0, 0x24, 0x06, 0xfc, 0x20, 0x66, 0x66, 0xa7, 0xdd,
	0x6d, 0xa8, 0xb4, 0xbd, 0x34, 0xb3, 0x3b, 0xcf, 0xcb, 0xef, 0xf9, 0xcf, 0x7f, 0xba, 0x30, 0xef,
	0x87, 0x34, 0x8a, 0x77, 0x69, 0x14, 0x93, 0x78, 0x5b, 0xd6, 0x65, 0x4a, 0x63, 0xb1, 0xcd, 0x52,
	0x72, 0xe0, 0x91, 0xbd, 0x7d, 0x96, 0x1e, 0xe2, 0x24, 0xe5, 0x92, 0xa3, 0x99, 0x4e, 0x18, 0x2e,
	0x86, 0xe1, 0x03, 0xcf, 0x9e, 0x0c, 0x78, 0xc0, 0x75, 0x14, 0x51, 0xab, 0x2c, 0xc1, 0xbe, 0xef,
	0x73, 0xb1, 0xcb, 0x05, 0x69, 0x50, 0xc1, 0xb2, 0x4a, 0xe4, 0xc0, 0x6b, 0x30, 0x49, 0x3d, 0x92,
	0xd0, 0x20, 0x8a, 0xa9, 0x8c, 0x78, 0x6c, 0x62, 0xaf, 0x60, 0x90, 0x29, 0xf5, 0x99, 0x09, 0xbb,
	0x13, 0x70, 0x1e, 0xec, 0x30, 0x42, 0x93, 0x88, 0xd0, 0x38, 0xe6, 0x52, 0xd7, 0x10, 0xd9, 0x6e,
	0xf5, 0x01, 0xdc, 0x7e, 0xa9, 0xda, 0xac, 0xef, 0x50, 0x21, 0x5e, 0xab, 0xb4, 0x1a, 0xdb, 0xdb,
	0x67, 0x42, 0x22, 0x04, 0xd7, 0x43, 0x2a, 0xc2, 0x69, 0x6b, 0xce, 0x5a, 0x2c, 0xd7, 0xf4, 0xba,
	0x4a, 0x61, 0xea, 0x52, 0xb4, 0x48, 0x78, 0x2c, 0x18, 0xda, 0x80, 0x8a, 0xaf, 0xde, 0xd6, 0x75,
	0x6f, 0x9d, 0x55, 0x59, 0x9e, 0xc7, 0xff, 0x15, 0x00, 0x17, 0x6a, 0x80, 0xdf, 0x59, 0xf7, 0x68,
	0x21, 0xda, 0x44, 0x1b, 0x00, 0xb9, 0x08, 0xa6, 0xc3, 0x02, 0xce, 0x14, 0xc3, 0x4a, 0x31, 0x9c,
	0x69, 0x6f, 0x14, 0xc3, 0x5b, 0x34, 0x68, 0x4f, 0x53, 0x2b, 0x64, 0x56, 0xbf, 0x5b, 0x30, 0x7d,
	0xb9, 0x87, 0x99, 0xe3, 0x1d, 0xdc, 0x2c, 0xcc, 0x21, 0xa6, 0xad, 0xb9, 0x6b, 0x03, 0x0f, 0xb2,
	0x36, 0x71, 0xf2, 0x7b, 0xb6, 0x74, 0x7c, 0x36, 0x3b, 0x66, 0x8a, 0x56, 0xf2, 0xc1, 0x04, 0x7a,
	0xd6, 0x85, 0x3f, 0xa2, 0xf1, 0xef, 0xf5, 0xc5, 0xcf, 0xb0, 0xba, 0xf8, 0x5d, 0xb8, 0x95, 0xe3,
	0x3f, 0xa7, 0x22, 0x6c, 0x0b, 0x34, 0x09, 0xa3, 0xb9, 0xfa, 0xe5, 0x5a, 0xf6, 0xd0, 0x7d, 0xc4,
	0x59, 0xb8, 0x99, 0xb5, 0xd7, 0x11, 0xbf, 0x82, 0x19, 0x1d, 0xfd, 0x54, 0xf8, 0x29, 0xff, 0xf0,
	0xa4, 0xd9, 0x4c, 0x99, 0xe8, 0x9c, 0xc0, 0x14, 0xdc, 0x48, 0x78, 0x2a, 0xeb, 0x51, 0xd3, 0xe4,
	0x8c, 0xa9, 0xc7, 0xcd, 0x26, 0xba, 0x0b, 0xe0, 0x87, 0x34, 0x8e, 0xd9, 0x8e, 0xda, 0x1b, 0xd1,
	0x7b, 0x65, 0xf3, 0x66, 0xb3, 0x59, 0x5d, 0x07, 0xbb, 0x57, 0x51, 0x83, 0x31, 0x0f, 0x13, 0x4c,
	0x6f, 0xd4, 0x69, 0xb6, 0x63, 0x8a, 0x8f, 0xb3, 0x62, 0xf8, 0xf2, 0xd9, 0x28, 0x8c, 0xea, 0x2a,
	0xe8, 0xd8, 0x02, 0xc8, 0x55, 0x47, 0xde, 0x15, 0x87, 0xd3, 0xdb, 0xdc, 0xf6, 0xf2, 0x30, 0x29,
	0x19, 0x66, 0x75, 0xf5, 0xd3, 0x8f, 0xbf, 0x5f, 0x46, 0x08, 0x72, 0x49, 0xd4, 0xf0, 0x09, 0x4d,
	0x12, 0x71, 0xe9, 0xde, 0x15, 0x9d, 0x43, 0x8e, 0x94, 0x9e, 0x2d, 0xf4, 0xd5, 0x82, 0x4a, 0xc1,
	0x68, 0x68, 0x88, 0xd6, 0x6d, 0xdd, 0xed, 0x95, 0xa1, 0x72, 0x0c, 0x2f, 0xd6, 0xbc, 0x8b, 0x68,
	0x61, 0x30, 0x5e, 0xf4, 0xcd, 0x82, 0x72, 0xc7, 0x23, 0x68, 0x69, 0xa0, 0x96, 0x05, 0xf7, 0xd9,
	0xde, 0x10, 0x19, 0x06, 0xf1, 0x91, 0x46, 0x5c, 0x42, 0xb8, 0x1f, 0xa2, 0x92, 0x52, 0x49, 0xaa,
	0x51, 0x5b, 0xe8, 0xa7, 0x05, 0xe3, 0x5d, 0x5e, 0x42, 0x0f, 0xfb, 0x35, 0xef, 0xe5, 0x67, 0x7b,
	0x75, 0xc8, 0x2c, 0x83, 0xfd, 0x56, 0x63, 0x6f, 0xa1, 0x17, 0x57, 0x60, 0x67, 0xde, 0x17, 0xe4,
	0x28, 0xbf, 0x17, 0x2d, 0xa2, 0x6e, 0x8b, 0x20, 0x47, 0xe6, 0x0e, 0xb5, 0x48, 0xb7, 0xed, 0xd7,
	0xde, 0x9c, 0x9c, 0x3b, 0xd6, 0xe9, 0xb9, 0x63, 0xfd, 0x39, 0x77, 0xac, 0xcf, 0x17, 0x4e, 0xe9,
	0xf4, 0xc2, 0x29, 0xfd, 0xba, 0x70, 0x4a, 0xef, 0x1f, 0x07, 0x91, 0x0c, 0xf7, 0x1b, 0xd8, 0xe7,
	0xbb, 0xc4, 0x4f, 0x0f, 0x13, 0xc9, 0x5d, 0x9e, 0x06, 0xae, 0xa6, 0x27, 0xfa, 0xd7, 0xd5, 0x1f,
	0x82, 0x8f, 0x0a, 0xc4, 0xed, 0x80, 0xc8, 0xc3, 0x84, 0x89, 0xc6, 0x98, 0xfe, 0xab, 0x5f, 0xf9,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x99, 0x77, 0x4b, 0x32, 0xb5, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ClassTrace queries a class trace information.
	ClassTrace(ctx context.Context, in *QueryClassTraceRequest, opts ...grpc.CallOption) (*QueryClassTraceResponse, error)
	// ClassTraces queries all class traces.
	ClassTraces(ctx context.Context, in *QueryClassTracesRequest, opts ...grpc.CallOption) (*QueryClassTracesResponse, error)
	// ClassHash queries a class hash information.
	ClassHash(ctx context.Context, in *QueryClassHashRequest, opts ...grpc.CallOption) (*QueryClassHashResponse, error)
	// EscrowAddress returns the escrow address for a particular port and channel id.
	EscrowAddress(ctx context.Context, in *QueryEscrowAddressRequest, opts ...grpc.CallOption) (*QueryEscrowAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ClassTrace(ctx context.Context, in *QueryClassTraceRequest, opts ...grpc.CallOption) (*QueryClassTraceResponse, error) {
	out := new(QueryClassTraceResponse)
	err := c.cc.Invoke(ctx, "/chainmain.nft_transfer.v1.Query/ClassTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassTraces(ctx context.Context, in *QueryClassTracesRequest, opts ...grpc.CallOption) (*QueryClassTracesResponse, error) {
	out := new(QueryClassTracesResponse)
	err := c.cc.Invoke(ctx, "/chainmain.nft_transfer.v1.Query/ClassTraces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassHash(ctx context.Context, in *QueryClassHashRequest, opts ...grpc.CallOption) (*QueryClassHashResponse, error) {
	out := new(QueryClassHashResponse)
	err := c.cc.Invoke(ctx, "/chainmain.nft_transfer.v1.Query/ClassHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EscrowAddress(ctx context.Context, in *QueryEscrowAddressRequest, opts ...grpc.CallOption) (*QueryEscrowAddressResponse, error) {
	out := new(QueryEscrowAddressResponse)
	err := c.cc.Invoke(ctx, "/chainmain.nft_transfer.v1.Query/EscrowAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ClassTrace queries a class trace information.
	ClassTrace(context.Context, *QueryClassTraceRequest) (*QueryClassTraceResponse, error)
	// ClassTraces queries all class traces.
	ClassTraces(context.Context, *QueryClassTracesRequest) (*QueryClassTracesResponse, error)
	// ClassHash queries a class hash information.
	ClassHash(context.Context, *QueryClassHashRequest) (*QueryClassHashResponse, error)
	// EscrowAddress returns the escrow address for a particular port and channel id.
	EscrowAddress(context.Context, *QueryEscrowAddressRequest) (*QueryEscrowAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ClassTrace(ctx context.Context, req *QueryClassTraceRequest) (*QueryClassTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassTrace not implemented")
}
func (*UnimplementedQueryServer) ClassTraces(ctx context.Context, req *QueryClassTracesRequest) (*QueryClassTracesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassTraces not implemented")
}
func (*UnimplementedQueryServer) ClassHash(ctx context.Context, req *QueryClassHashRequest) (*QueryClassHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassHash not implemented")
}
func (*UnimplementedQueryServer) EscrowAddress(ctx context.Context, req *QueryEscrowAddressRequest) (*QueryEscrowAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscrowAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ClassTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainmain.nft_transfer.v1.Query/ClassTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassTrace(ctx, req.(*QueryClassTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassTracesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainmain.nft_transfer.v1.Query/ClassTraces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassTraces(ctx, req.(*QueryClassTracesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainmain.nft_transfer.v1.Query/ClassHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassHash(ctx, req.(*QueryClassHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EscrowAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEscrowAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EscrowAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chainmain.nft_transfer.v1.Query/EscrowAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EscrowAddress(ctx, req.(*QueryEscrowAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chainmain.nft_transfer.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassTrace",
			Handler:    _Query_ClassTrace_Handler,
		},
		{
			MethodName: "ClassTraces",
			Handler:    _Query_ClassTraces_Handler,
		},
		{
			MethodName: "ClassHash",
			Handler:    _Query_ClassHash_Handler,
		},
		{
			MethodName: "EscrowAddress",
			Handler:    _Query_EscrowAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chainmain/nft_transfer/v1/query.proto",
}

func (m *QueryClassTraceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassTraceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassTraceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassTraceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassTraceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassTraceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassTrace != nil {
		{
			size, err := m.ClassTrace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassTracesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassTracesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassTracesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassTracesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassTracesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassTracesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassTraces) > 0 {
		for iNdEx := len(m.ClassTraces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassTraces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Trace) > 0 {
		i -= len(m.Trace)
		copy(dAtA[i:], m.Trace)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Trace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEscrowAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEscrowAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEscrowAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryClassTraceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassTraceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassTrace != nil {
		l = m.ClassTrace.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassTracesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassTracesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClassTraces) > 0 {
		for _, e := range m.ClassTraces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trace)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEscrowAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryClassTraceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassTraceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassTraceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassTraceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassTraceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassTraceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassTrace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClassTrace == nil {
				m.ClassTrace = &ClassTrace{}
			}
			if err := m.ClassTrace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassTracesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassTracesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassTracesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassTracesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassTracesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassTracesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassTraces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassTraces = append(m.ClassTraces, ClassTrace{})
			if err := m.ClassTraces[len(m.ClassTraces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEscrowAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEscrowAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEscrowAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
