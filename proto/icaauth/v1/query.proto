syntax = "proto3";
package chainmain.icaauth.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "icaauth/v1/params.proto";

option go_package = "github.com/crypto-org-chain/chain-main/x/icaauth/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/chainmain/icaauth/v1/params";
  }

  // InterchainAccountAddress queries the interchain account address for given `connectionId` and `owner`
  rpc InterchainAccountAddress(QueryInterchainAccountAddressRequest) returns (QueryInterchainAccountAddressResponse) {
    option (google.api.http).get = "/chainmain/icaauth/v1/interchain_account_address/{connectionId}/{owner}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryInterchainAccountAddressRequest defines the request for the InterchainAccountAddress query.
message QueryInterchainAccountAddressRequest {
  string connectionId = 1 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  string owner        = 2;
}

// QueryInterchainAccountAddressResponse defines the response for the InterchainAccountAddress query.
message QueryInterchainAccountAddressResponse {
  string interchainAccountAddress = 1;
}
